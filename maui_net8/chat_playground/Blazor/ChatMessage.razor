@inherits LayoutComponentBase

<div>
    @if (MessageViewModel is not null)
    {
        <div class="messageDiv">
            @if (MessageViewModel.Sender == Models.MessageSender.Assistant)
            {
                <div>
                    @if (MessageViewModel.MessageInProgress && string.IsNullOrEmpty(MessageViewModel.Text))
                    {
                        <MudProgressCircular Size="Size.Small" Color="Color.Primary" Indeterminate="true"/>
                    }
                    else if (!string.IsNullOrEmpty(MessageViewModel.Text))
                    {
                        @((MarkupString)Markdig.Markdown.ToHtml(MessageViewModel.Text))
                    }
                </div>
            }
            else
            {
                <div class="userMessageDiv">
                    @MessageViewModel.Text
                </div>
            }
        </div>
    }
</div>

<style>

    body {
        background-color: #141318;
        color: #E6E1E9;
    }

    .userMessageDiv {
        background: #201F24;
        border: #000;
        float: right;
        margin-left: auto; 
        margin-right: 0;
        text-align: right;
        padding: 16px;
        -moz-border-radius: 15px;
        border-radius: 15px;
    }

    .chatActionButton {
        display: block;
        height: 32px;
        width: 32px;
        border-radius: 50%;
        border: 1px solid red;
    }

    .hide {
        display: none;
    }

    .messageDiv:hover + .hide {
        display: block;
        margin: 20px;
        color: red;
    }
</style>

@code {
    [Parameter]
    public MessageViewModel? MessageViewModel { get; set; }

    public int Count { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (MessageViewModel != null)
        {
            MessageViewModel.PropertyChanged += OnMessageViewModelPropertyChanged;
        }
    }

    private async void OnMessageViewModelPropertyChanged(object? sender, System.ComponentModel.PropertyChangedEventArgs e)
    {
        await InvokeAsync(() => { StateHasChanged(); });
    }
}


