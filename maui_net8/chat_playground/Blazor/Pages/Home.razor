@page "/"


@using Majorsoft.Blazor.Components.Common.JsInterop.ElementInfo
@using Majorsoft.Blazor.Components.Common.JsInterop.GlobalMouseEvents
@using Majorsoft.Blazor.Components.Common.JsInterop.Resize
@using Majorsoft.Blazor.Components.Common.JsInterop.Scroll;
@using Microsoft.Extensions.Logging

@inject LMKitService LmKitService
@inject HttpClient Http
@inject ChatPageViewModel ChatPageViewModel
@inject IJSRuntime JS
@inject IScrollHandler ScrollHandler
@inject IResizeHandler ResizeHandler
@inject ILogger<Home> Logger

<div id="container">
    <div id="chat-info">
        <div id="scroll-to-end">
            @if (!IsScrolledToEnd)
            {
                <MudFab @onclick="OnScrollToEndButtonClicked" StartIcon="@Icons.Material.Outlined.ArrowDownward" />
            }
        </div>
    </div>

    <div @ref="_chatHistoryDiv" id="message-list">
        @if (Conversation != null)
        {
            <MudStack Spacing="4">
                @foreach (var message in Conversation.Messages)
                {
                    <ChatMessage MessageViewModel="message" />
                }
            </MudStack>
        }
    </div>
</div>

<style>
    #container {
        height: 100vh;
        background-color: #141318;
        position: relative;
    }

    #message-list {
        max-width: 800px;
        overflow-y: scroll;
        margin: auto;
        padding: 8px;
        background-color: transparent;
    }

    #chat-info {
        background-color: transparent;
        left: 50%;
        transform: translate(-50%, 0);
        position: fixed;
        bottom: 0;
    }

    #scroll-to-end {
        display: block;
        margin-left: auto;
        margin-right: auto;
        background-color: #201F24;
    }
</style>

@code
{
    private bool _ignoreScrollsUntilNextScrollUp;
    private double? _previousScrollTop;
    private bool _shouldAutoScroll;
    private double _scrollTop;

    private ElementReference _chatHistoryDiv;

    private ConversationViewModel? _conversation;

    public bool IsScrolledToEnd { get; set; }

    public ConversationViewModel? Conversation
    {
        get => _conversation;
        set
        {
            if (_conversation != null)
            {
                _conversation.Messages.CollectionChanged -= OnConversationMessagesCollectionChanged;
            }
            _conversation = value;

            if (_conversation != null)
            {
                _conversation.Messages.CollectionChanged += OnConversationMessagesCollectionChanged;
            }

            _previousScrollTop = null;
            _ignoreScrollsUntilNextScrollUp = true;
            IsScrolledToEnd = true;

            StateHasChanged();
        }
    }

    protected override async void OnInitialized()
    {
        base.OnInitialized();

        if (ChatPageViewModel != null)
        {
            Conversation = ChatPageViewModel.CurrentConversation;
            ChatPageViewModel.PropertyChanged += OnChatPageViewModelPropertyChanged;
        }

        await ScrollHandler.RegisterPageScrollAsync(PageScrolled);
        await ResizeHandler.RegisterPageResizeAsync(Resized);
    }

    private async void OnChatPageViewModelPropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName == nameof(ChatPageViewModel.CurrentConversation))
        {
            Conversation = ChatPageViewModel.CurrentConversation;

            await ScrollToEnd();
        }
    }

    private async void OnConversationMessagesCollectionChanged(object? sender, NotifyCollectionChangedEventArgs e)
    {
        StateHasChanged();
        await ScrollToEnd();

        var latestMessage = Conversation!.Messages.LastOrDefault();

        if (latestMessage != null && latestMessage.Sender == Models.MessageSender.Assistant && latestMessage.MessageInProgress)
        {
            _shouldAutoScroll = true;
            latestMessage.MessageContentUpdated += OnLatestAssistantResponseProgressed;
        }
    }

    private async void OnLatestAssistantResponseProgressed(object? sender, EventArgs e)
    {
        if (_shouldAutoScroll)
        {
            await ScrollToEnd();
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (ScrollHandler is not null)
        {
            await ScrollHandler.DisposeAsync();
        }
    }

    private async Task PageScrolled(Majorsoft.Blazor.Components.Common.JsInterop.Scroll.ScrollEventArgs args)
    {
        _scrollTop = args.Y;

        bool shouldCheckIsScrolledToEnd = true;
        bool? isScrollUp = null;

        if (_previousScrollTop != null)
        {
            isScrollUp = args.Y < _previousScrollTop;

            if (isScrollUp.Value && _shouldAutoScroll)
            {
                _shouldAutoScroll = false;
            }
        }

        if (_ignoreScrollsUntilNextScrollUp)
        {
            if (isScrollUp == null || !isScrollUp.Value)
            {
                shouldCheckIsScrolledToEnd = false;
            }
            else
            {
                _ignoreScrollsUntilNextScrollUp = false;
            }
        }

        if (shouldCheckIsScrolledToEnd)
        {
            await CheckIsScrolledToEnd();
            StateHasChanged();
        }

        _previousScrollTop = _scrollTop;
    }

    private async Task Resized(ResizeEventArgs args)
    {
        if (IsScrolledToEnd)
        {
            await ScrollToEnd(false);
        }
        else
        {
            await CheckIsScrolledToEnd();
        }
    }

    private async Task ScrollToEnd(bool animate = false)
    {
        IsScrolledToEnd = true;
        _ignoreScrollsUntilNextScrollUp = true;

        await ScrollHandler.ScrollToPageEndAsync(animate);
    }

    private async Task CheckIsScrolledToEnd()
    {
        var clientHeight = await JS.InvokeAsync<double>("getViewHeight");
        var chatContentHeight = await JS.InvokeAsync<double>("getScrollHeight");

        IsScrolledToEnd = Math.Abs(chatContentHeight - clientHeight - _scrollTop) < 5 || chatContentHeight <= clientHeight;

        if (IsScrolledToEnd && _conversation != null && _conversation!.AwaitingResponse)
        {
            _shouldAutoScroll |= true;
        }
    }

    public async void OnScrollToEndButtonClicked()
    {
        await ScrollToEnd(true);
    }
}